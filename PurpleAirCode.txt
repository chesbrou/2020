const fetch = require('node-fetch');
const handleMessage = require('./lib/engine');
 
const msiEndpoint = process.env.MSI_ENDPOINT;
const msiSecret = process.env.MSI_SECRET;
 
const parameters = {
   idScope: process.env.ID_SCOPE,
   primaryKeyUrl: process.env.IOTC_KEY_URL
};
 
let kvToken;
 
module.exports = async function (context, req) {
   try {
       const response = await fetch('https://www.purpleair.com/json?show=68873');
            const json = await response.json();
       context.log(json.results[0]);
       req.body = {
               device: {
                  
                   deviceId: '68873'
 
               },
               measurements: json.results[0]
              
       };
       await handleMessage({ ...parameters, log: context.log, getSecret: getKeyVaultSecret }, req.body.device, req.body.measurements, req.body.timestamp);
   } catch (e) {
       context.log('[ERROR]', e.message);
 
       context.res = {
           status: e.statusCode ? e.statusCode : 500,
           body: e.message
       };
   }
}
 
/**
* Fetches a Key Vault secret. Attempts to refresh the token on authorization errors.
*/
async function getKeyVaultSecret(context, secretUrl, forceTokenRefresh = false) {
   if (!kvToken || forceTokenRefresh) {
       const url = `${msiEndpoint}/?resource=https://vault.azure.net&api-version=2017-09-01`;
       const options = {
           method: 'GET',
           headers: { 'Secret': msiSecret }
       };
 
       try {
           context.log('[HTTP] Requesting new Key Vault token');
           const response = await fetch(url, options).then(res => res.json())
           kvToken = response.access_token;
       } catch (e) {
           context.log('fail: ' + e);
           throw new Error('Unable to get Key Vault token');
       }
   }
 
   url = `${secretUrl}?api-version=2016-10-01`;
   var options = {
       method : 'GET',
       headers : { 'Authorization' : `Bearer ${kvToken}` },
   };
 
   try {
       context.log('[HTTP] Requesting Key Vault secret', secretUrl);
       const response = await fetch(url, options).then(res => res.json())
       return response && response.value;
   } catch(e) {
       if (e.statusCode === 401 && !forceTokenRefresh) {
           return await getKeyVaultSecret(context, secretUrl, true);
       } else {
           throw new Error('Unable to fetch secret');
       }
   }
}